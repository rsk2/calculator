{"version":3,"sources":["logo.svg","components/Header.js","components/Calculator.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","displayText","variableOne","variableTwo","action","historyText","historyRef","React","createRef","addToDisplay","bind","assertThisInitialized","clearDisplay","deleteLastChar","gcd","lcm","divide","result","event","innerText","target","setState","prevState","parseInt","length","slice","max","i","quotient","remainder","Math","floor","_this2","current","rows","String","calculateGCD","calculateLCM","calculateDivision","map","className","type","value","readOnly","onClick","ref","Component","Footer","class","App","components_Header","components_Calculator","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5c9e8f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nfunction Header() {\r\n   // return (<header>\r\n    //    <img src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" />\r\n      //  <p>Meme Generator</p>\r\n    //</header>)\r\n    return (<header>\r\n            <p>LCM/GCD Calculator</p>\r\n        </header>)\r\n}\r\nexport default Header","import React from \"react\"\r\nimport { relative } from \"path\";\r\n\r\nclass Calculator extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state ={\r\n            displayText:\"0\",\r\n            variableOne: \"0\",\r\n            variableTwo: \"0\",\r\n            action:\"\", \r\n         //   clear: false,\r\n            historyText:\"\"\r\n        }\r\n        this.historyRef = React.createRef()\r\n        this.addToDisplay = this.addToDisplay.bind(this)\r\n        this.clearDisplay = this.clearDisplay.bind(this)\r\n        this.deleteLastChar = this.deleteLastChar.bind(this)\r\n        this.gcd = this.gcd.bind(this)\r\n        this.lcm = this.lcm.bind(this)\r\n        this.divide = this.divide.bind(this)\r\n        this.result = this.result.bind(this)\r\n    }\r\n\r\n    addToDisplay(event) {\r\n        const {innerText} = event.target\r\n        this.setState((prevState) => {\r\n            if (parseInt(prevState.displayText) === 0)\r\n                prevState.displayText = \"\"\r\n          /*  if(prevState.clear)\r\n                return{\r\n                    displayText: innerText,\r\n                    clear: false\r\n                } */\r\n            if(prevState.displayText.length < 10)  \r\n                return { displayText : prevState.displayText + innerText}\r\n    })\r\n    }\r\n\r\n    clearDisplay(event) {\r\n        this.setState({ \r\n            displayText : \"0\"\r\n        })\r\n    }\r\n\r\n    deleteLastChar(event) {\r\n        this.setState((prevState) => {\r\n            return { \r\n            displayText : prevState.displayText.slice(0, -1)\r\n            }\r\n        })\r\n    }\r\n          \r\n    gcd(event) {\r\n        this.setState((prevState) => { \r\n            if (!prevState.displayText )\r\n                prevState.displayText = \"0\"\r\n            return{\r\n            variableOne: prevState.displayText,\r\n            displayText : \"\",\r\n            action: \"gcd\",\r\n            historyText: prevState.displayText + \" GCD \"\r\n            }\r\n        })\r\n    }\r\n\r\n    lcm(event) {\r\n        this.setState((prevState) => {\r\n            if (!prevState.displayText )\r\n                prevState.displayText = \"0\" \r\n            return{\r\n            variableOne: prevState.displayText,\r\n            displayText : \"\",\r\n            action: \"lcm\",\r\n            historyText: prevState.displayText + \" LCM \"\r\n            }\r\n        })\r\n    }\r\n\r\n    divide(event) {\r\n        this.setState((prevState) => { \r\n            if (!prevState.displayText )\r\n                prevState.displayText = \"0\" \r\n            return{\r\n            variableOne: prevState.displayText,\r\n            displayText : \"\",\r\n            action: \"divide\",\r\n            historyText: prevState.displayText + \" / \"\r\n            }\r\n        })\r\n    }\r\n\r\n    calculateGCD(variableOne,variableTwo) {\r\n        if (variableOne === 0 || variableTwo === 0)\r\n            return 0\r\n        let result = 1\r\n        if (variableOne % variableTwo === 0) {\r\n            result = variableTwo\r\n        }\r\n        else if (variableTwo % variableOne === 0) {\r\n            result = variableOne\r\n        }\r\n        else {\r\n            const max = variableOne > variableTwo? variableTwo : variableOne\r\n            for(let i=2;i<= max; i++) {\r\n                if(i >= variableOne || i >= variableTwo)\r\n                    break\r\n                while(variableOne % i == 0 && variableTwo % i == 0) {\r\n                    result *= i\r\n                    variableOne /= i\r\n                    variableTwo /= i\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    calculateLCM(variableOne,variableTwo) {\r\n        let result = 1\r\n        if (variableOne % variableTwo === 0) {\r\n            result = variableOne\r\n        }\r\n        else if (variableTwo % variableOne === 0) {\r\n            result = variableTwo\r\n        }\r\n        else {\r\n            const max = variableOne > variableTwo? variableTwo : variableOne\r\n            for(let i=2;i<= max; i++) {\r\n                if(i >= variableOne || i >= variableTwo)\r\n                    break\r\n                while(variableOne % i == 0 && variableTwo % i == 0) {\r\n                    result *= i\r\n                    variableOne /= i\r\n                    variableTwo /= i\r\n                }\r\n            }\r\n            result *= variableOne * variableTwo\r\n        }\r\n        return result\r\n    }\r\n\r\n    calculateDivision(variableOne,variableTwo){\r\n        if (variableTwo == 0)\r\n             return [0,0]\r\n        let quotient = 1\r\n        let remainder = 0\r\n        if (variableOne % variableTwo === 0) {\r\n            quotient = variableOne / variableTwo\r\n        }\r\n        else {\r\n            \r\n            quotient = Math.floor(variableOne / variableTwo)\r\n            remainder = variableOne % variableTwo\r\n        }\r\n        return [quotient,remainder]\r\n    }\r\n\r\n    result(event) {\r\n        if (this.historyRef.current.rows != \"1\")\r\n            this.historyRef.current.rows = \"1\"\r\n        this.setState((prevState) => {\r\n            let variableOne = parseInt(prevState.variableOne)\r\n            if (prevState.displayText === \"\")\r\n                prevState.displayText = 0\r\n                let variableTwo = parseInt(prevState.displayText)  \r\n                if(prevState.action === \"gcd\"){\r\n                let result = String(this.calculateGCD(variableOne,variableTwo))\r\n                return{\r\n                    variableOne: 0,\r\n                    displayText : result,\r\n                   // clear: true,\r\n                    action: \"\",\r\n                    historyText: prevState.historyText + \" \" + prevState.displayText + \" = \" + result\r\n                    }\r\n\r\n                }\r\n                else if(prevState.action == \"lcm\"){      \r\n                let result = String(this.calculateLCM(variableOne,variableTwo))\r\n                return{\r\n                    variableOne: 0,\r\n                    displayText : result,\r\n                  //  clear: true,\r\n                    action: \"\",\r\n                    historyText: prevState.historyText + \" \" + prevState.displayText + \" = \" + result\r\n                    }\r\n                }\r\n                else if(prevState.action == \"divide\"){      \r\n                    let result = this.calculateDivision(variableOne,variableTwo).map(String)\r\n                    this.historyRef.current.rows = \"2\"\r\n                    let historyText = \"\"\r\n                    if (result[0] == \"0\" && result[1] == \"0\")\r\n                        historyText = prevState.historyText + \": Division by zero\"\r\n                    else\r\n                        historyText = prevState.historyText + prevState.displayText\r\n                                       + \" : Quotient = \" + result[0] + \", Remainder = \" + result[1]\r\n\r\n                    return{\r\n                        variableOne: 0,\r\n                        displayText : result[0],\r\n                     //   clear: true,\r\n                        action: \"\",\r\n                        historyText: historyText\r\n                        }\r\n                    }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"calculator\" >\r\n            \r\n                <input type=\"text\" value={this.state.displayText} className=\"display\"\r\n                 readOnly></input>\r\n                 <br/>\r\n                 <div className=\"inputBoxes\">\r\n                    <div className=\"row\">\r\n                        <button onClick={this.addToDisplay}>1</button>\r\n                        <button onClick={this.addToDisplay}>2</button>\r\n                        <button onClick={this.addToDisplay}>3</button>\r\n                        <button onClick={this.addToDisplay}>4</button>\r\n                        <button onClick={this.addToDisplay}>5</button>\r\n                        <button onClick={this.clearDisplay}>C</button>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <button onClick={this.addToDisplay}>6</button>\r\n                        <button onClick={this.addToDisplay}>7</button>\r\n                        <button onClick={this.addToDisplay}>8</button>\r\n                        <button onClick={this.addToDisplay}>9</button>\r\n                        <button onClick={this.addToDisplay}>0</button>\r\n                        <button onClick={this.deleteLastChar}> &#8592; </button>\r\n                    </div>\r\n                    \r\n                    <div className=\"row\">\r\n                        <button onClick={this.gcd}>GCD</button>\r\n                        <button onClick={this.lcm}>LCM</button>\r\n                        <button onClick={this.divide}> / </button>\r\n                        <button onClick={this.result} >=</button>\r\n                    </div>\r\n                    <div className = \"row\">\r\n                       \r\n                        {\r\n                           //  <button>Prime?</button>\r\n                        //<button onClick={}>Perfect Square?</button>\r\n                        }\r\n                    </div>\r\n                   \r\n                </div>\r\n                <textarea rows=\"1\" value={this.state.historyText} readOnly\r\n                     className=\"history\" ref={this.historyRef}></textarea>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator","import React from 'react'\r\n\r\nclass Footer extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n                <div class=\"container\">\r\n                    <p></p>\r\n                </div>\r\n        )\r\n    \r\n    }\r\n\r\n}\r\n\r\nexport default Footer","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header.js'\nimport Calculator from './components/Calculator.js'\nimport Footer from './components/Footer.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        \n        <Header />\n        <Calculator />\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}