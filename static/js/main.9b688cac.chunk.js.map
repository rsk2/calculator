{"version":3,"sources":["components/Calculator.js","components/Footer.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","displayText","variableOne","variableTwo","action","forgetDisplayText","historyText","historyRef","React","createRef","addToDisplay","bind","assertThisInitialized","clearDisplay","deleteLastChar","gcd","lcm","result","event","innerText","target","setState","prevState","parseInt","length","newDisplayText","slice","max","i","_this2","String","calculateGCD","calculateLCM","react_default","a","createElement","className","type","value","readOnly","onClick","style","backgroundColor","color","ref","rows","Math","ceil","Component","Footer","width","window","innerWidth","class","Header","App","components_Header","components_Calculator","components_Footer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b688cac.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Calculator extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state ={\r\n            displayText:\"0\",\r\n            variableOne: \"0\",\r\n            variableTwo: \"0\",\r\n            action:\"\", \r\n            forgetDisplayText: false,\r\n            historyText:\" \"\r\n        }\r\n        this.historyRef = React.createRef()\r\n        this.addToDisplay = this.addToDisplay.bind(this)\r\n        this.clearDisplay = this.clearDisplay.bind(this)\r\n        this.deleteLastChar = this.deleteLastChar.bind(this)\r\n        this.gcd = this.gcd.bind(this)\r\n        this.lcm = this.lcm.bind(this)\r\n        this.result = this.result.bind(this)\r\n    }\r\n\r\n    addToDisplay(event) {\r\n        const {innerText} = event.target\r\n        this.setState((prevState) => {\r\n            if (parseInt(prevState.displayText) === 0)\r\n                prevState.displayText = \"\"\r\n            if(prevState.forgetDisplayText)\r\n                return{\r\n                    displayText: innerText,\r\n                    forgetDisplayText: false\r\n                } \r\n            if(prevState.displayText.length < 10)  \r\n                return { displayText : prevState.displayText + innerText}\r\n    })\r\n    }\r\n\r\n    clearDisplay(event) {\r\n        this.setState({ \r\n            displayText : \"0\"\r\n        })\r\n    }\r\n\r\n    deleteLastChar(event) {\r\n        this.setState((prevState) => {\r\n            let newDisplayText = \"0\"\r\n            if(prevState.displayText.length > 1)\r\n                newDisplayText = prevState.displayText.slice(0, -1)\r\n            return { \r\n            displayText : newDisplayText\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n          \r\n    gcd(event) {\r\n        this.setState((prevState) => { \r\n            if (!prevState.displayText )\r\n                prevState.displayText = \"0\"\r\n            return{\r\n            variableOne: prevState.displayText,\r\n            displayText : \"\",\r\n            action: \"gcd\",\r\n            historyText: prevState.displayText + \" GCD \"\r\n            }\r\n        })\r\n    }\r\n\r\n    lcm(event) {\r\n        this.setState((prevState) => {\r\n            if (!prevState.displayText )\r\n                prevState.displayText = \"0\" \r\n            return{\r\n            variableOne: prevState.displayText,\r\n            displayText : \"\",\r\n            action: \"lcm\",\r\n            historyText: prevState.displayText + \" LCM \"\r\n            }\r\n        })\r\n    }\r\n\r\n    calculateGCD(variableOne,variableTwo) {\r\n        if (variableOne === 0 || variableTwo === 0)\r\n            return 0\r\n        let result = 1\r\n        if (variableOne % variableTwo === 0) {\r\n            result = variableTwo\r\n        }\r\n        else if (variableTwo % variableOne === 0) {\r\n            result = variableOne\r\n        }\r\n        else {\r\n            const max = variableOne > variableTwo? variableTwo : variableOne\r\n            for(let i=2;i<= max; i++) {\r\n                if(i >= variableOne || i >= variableTwo)\r\n                    break\r\n                while(variableOne % i == 0 && variableTwo % i == 0) {\r\n                    result *= i\r\n                    variableOne /= i\r\n                    variableTwo /= i\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    calculateLCM(variableOne,variableTwo) {\r\n        let result = 1\r\n        if (variableOne % variableTwo === 0) {\r\n            result = variableOne\r\n        }\r\n        else if (variableTwo % variableOne === 0) {\r\n            result = variableTwo\r\n        }\r\n        else {\r\n            const max = variableOne > variableTwo? variableTwo : variableOne\r\n            for(let i=2;i<= max; i++) {\r\n                if(i >= variableOne || i >= variableTwo)\r\n                    break\r\n                while(variableOne % i == 0 && variableTwo % i == 0) {\r\n                    result *= i\r\n                    variableOne /= i\r\n                    variableTwo /= i\r\n                }\r\n            }\r\n            result *= variableOne * variableTwo\r\n        }\r\n        return result\r\n    }\r\n\r\n    result(event) {\r\n        this.setState((prevState) => {\r\n            let variableOne = parseInt(prevState.variableOne)\r\n            if (prevState.displayText === \"\")\r\n                prevState.displayText = 0\r\n                let variableTwo = parseInt(prevState.displayText)  \r\n                if(prevState.action === \"gcd\"){\r\n                let result = String(this.calculateGCD(variableOne,variableTwo))\r\n                return{\r\n                    variableOne: 0,\r\n                    displayText : result,\r\n                    forgetDisplayText: true,\r\n                    action: \"\",\r\n                    historyText: prevState.historyText + \" \" + prevState.displayText + \" = \" + result\r\n                    }\r\n\r\n                }\r\n                else if(prevState.action == \"lcm\"){      \r\n                let result = String(this.calculateLCM(variableOne,variableTwo))\r\n                return{\r\n                    variableOne: 0,\r\n                    displayText : result,\r\n                    forgetDisplayText: true,\r\n                    action: \"\",\r\n                    historyText: prevState.historyText + \" \" + prevState.displayText + \" = \" + result\r\n                    }\r\n                }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"calculator\" >\r\n            \r\n                <input type=\"text\" value={this.state.displayText} className=\"display\"\r\n                 readOnly></input>\r\n                 <br/>\r\n                 <div className=\"inputBoxes\">\r\n                    <div className=\"row1\">\r\n                        <button onClick={this.addToDisplay}>1</button>\r\n                        <button onClick={this.addToDisplay}>2</button>\r\n                        <button onClick={this.addToDisplay}>3</button>\r\n                        <button onClick={this.addToDisplay}>4</button>\r\n                        <button onClick={this.addToDisplay}>5</button>\r\n                        <button onClick={this.clearDisplay} style={{backgroundColor:\"#ff3333\", color:\"white\"}}>\r\n                            C</button>\r\n                    </div>\r\n                    <div className=\"row2\">\r\n                        <button onClick={this.addToDisplay}>6</button>\r\n                        <button onClick={this.addToDisplay}>7</button>\r\n                        <button onClick={this.addToDisplay}>8</button>\r\n                        <button onClick={this.addToDisplay}>9</button>\r\n                        <button onClick={this.addToDisplay}>0</button>\r\n                        <button onClick={this.deleteLastChar} style={{backgroundColor:\"#fc33ff\", color:\"white\"}}> \r\n                            &#8592; </button>\r\n                    </div>\r\n                    \r\n                    <div className=\"row3\">\r\n                        <button onClick={this.gcd} style={{backgroundColor:\"#33fff9\"}}>\r\n                            GCD</button>\r\n                        <button onClick={this.lcm} style={{backgroundColor:\"#33ff90\"}}>\r\n                            LCM</button>                       \r\n                    </div>\r\n                    <div className = \"row4\">\r\n                    <button onClick={this.result} style={{backgroundColor:\"#338dff\", color:\"white\"}}>\r\n                            =</button>\r\n                    </div>\r\n                   \r\n                </div>\r\n                <textarea  value={this.state.historyText} readOnly \r\n                     className=\"history\" ref={this.historyRef} \r\n                     rows={Math.ceil(this.state.historyText.length/24)}></textarea>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator","import React from 'react'\r\n\r\nclass Footer extends React.Component {\r\n    constructor() {\r\n        //super(props);\r\n        super()\r\n        this.state = {width: 0};\r\n      }\r\n\r\n      componentWillMount(){\r\n        this.setState({width: window.innerWidth + 'px'});\r\n      }\r\n\r\n    render() {\r\n        return (\r\n                <div class=\"container\">\r\n                    <p></p>\r\n                </div>\r\n        )\r\n    \r\n    }\r\n\r\n}\r\n\r\nexport default Footer","import React from 'react'\r\n\r\nfunction Header() {\r\n    return (<header>\r\n            <p>Special Calculator</p>\r\n        </header>)\r\n}\r\nexport default Header","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Calculator from './components/Calculator.js';\r\nimport Footer from './components/Footer.js';\r\nimport Header from './components/Header.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        \r\n        <Header />\r\n        <Calculator />\r\n        <Footer/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}