{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rohan\\\\Documents\\\\React\\\\learn-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rohan\\\\Documents\\\\React\\\\learn-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rohan\\\\Documents\\\\React\\\\learn-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rohan\\\\Documents\\\\React\\\\learn-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rohan\\\\Documents\\\\React\\\\learn-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Rohan\\\\Documents\\\\React\\\\learn-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rohan\\\\Documents\\\\react\\\\learn-react\\\\src\\\\components\\\\Calculator.js\";\nimport React from \"react\";\nimport { relative } from \"path\";\n\nvar Calculator =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Calculator, _React$Component);\n\n  function Calculator() {\n    var _this;\n\n    _classCallCheck(this, Calculator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Calculator).call(this));\n    _this.state = {\n      displayText: \"\",\n      variableOne: 0,\n      variableTwo: 0,\n      action: \"\",\n      clear: false\n    };\n    _this.addToDisplay = _this.addToDisplay.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clearDisplay = _this.clearDisplay.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.gcd = _this.gcd.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.lcm = _this.lcm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.result = _this.result.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Calculator, [{\n    key: \"addToDisplay\",\n    value: function addToDisplay(event) {\n      var innerText = event.target.innerText;\n      this.setState(function (prevState) {\n        if (prevState.clear) return {\n          displayText: innerText,\n          clear: false\n        };else if (prevState.displayText.length < 10) return {\n          displayText: prevState.displayText + innerText\n        };\n      });\n    }\n  }, {\n    key: \"clearDisplay\",\n    value: function clearDisplay(event) {\n      this.setState({\n        displayText: \"\"\n      });\n    }\n  }, {\n    key: \"gcd\",\n    value: function gcd(event) {\n      this.setState(function (prevState) {\n        return {\n          variableOne: prevState.displayText,\n          displayText: \"\",\n          action: \"gcd\"\n        };\n      });\n    }\n  }, {\n    key: \"lcm\",\n    value: function lcm(event) {\n      this.setState(function (prevState) {\n        return {\n          variableOne: prevState.displayText,\n          displayText: \"\",\n          action: \"lcm\"\n        };\n      });\n    }\n  }, {\n    key: \"result\",\n    value: function result(event) {\n      this.setState(function (prevState) {\n        if (prevState.action === \"gcd\") {\n          var variableOne = parseInt(prevState.variableOne);\n          var variableTwo = parseInt(prevState.displayText);\n          var result = 1;\n\n          if (variableOne % variableTwo === 0) {\n            result = variableTwo;\n          } else if (variableTwo % variableOne === 0) {\n            result = variableOne;\n          } else {\n            var max = variableOne > variableTwo ? variableTwo : variableOne;\n\n            for (var i = 2; i <= max; i++) {\n              if (i >= variableOne || i >= variableTwo) break;\n\n              while (variableOne % i == 0 && variableTwo % i == 0) {\n                result *= i;\n                variableOne /= i;\n                variableTwo /= i;\n              }\n            }\n          }\n\n          return {\n            variableOne: 0,\n            displayText: result,\n            clear: true,\n            action: \"\"\n          };\n        } else if (prevState.action == \"lcm\") {\n          var _variableOne = parseInt(prevState.variableOne);\n\n          var _variableTwo = parseInt(prevState.displayText);\n\n          var result = 1;\n\n          if (_variableOne % _variableTwo === 0) {\n            result = _variableOne;\n          } else if (_variableTwo % _variableOne === 0) {\n            result = _variableTwo;\n          } else {\n            var _max = _variableOne > _variableTwo ? _variableTwo : _variableOne;\n\n            for (var _i = 2; _i <= _max; _i++) {\n              if (_i >= _variableOne || _i >= _variableTwo) break;\n\n              while (_variableOne % _i == 0 && _variableTwo % _i == 0) {\n                result *= _i;\n                _variableOne /= _i;\n                _variableTwo /= _i;\n              }\n            }\n\n            result *= _variableOne * _variableTwo;\n          }\n\n          return {\n            variableOne: 0,\n            displayText: result,\n            clear: true,\n            action: \"\"\n          };\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.displayText,\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.addToDisplay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"1\"), React.createElement(\"button\", {\n        onClick: this.addToDisplay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"2\"), React.createElement(\"button\", {\n        onClick: this.addToDisplay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"3\"), React.createElement(\"button\", {\n        onClick: this.addToDisplay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"4\"), React.createElement(\"button\", {\n        onClick: this.addToDisplay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"5\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.addToDisplay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"6\"), React.createElement(\"button\", {\n        onClick: this.addToDisplay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"7\"), React.createElement(\"button\", {\n        onClick: this.addToDisplay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"8\"), React.createElement(\"button\", {\n        onClick: this.addToDisplay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"9\"), React.createElement(\"button\", {\n        onClick: this.addToDisplay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"0\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.clearDisplay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"C\"), React.createElement(\"button\", {\n        onClick: this.gcd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"GCD\"), React.createElement(\"button\", {\n        onClick: this.lcm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"LCM\"), React.createElement(\"button\", {\n        onClick: this.result,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"=\"));\n    }\n  }]);\n\n  return Calculator;\n}(React.Component);\n\nexport default Calculator;","map":{"version":3,"sources":["C:\\Users\\Rohan\\Documents\\react\\learn-react\\src\\components\\Calculator.js"],"names":["React","relative","Calculator","state","displayText","variableOne","variableTwo","action","clear","addToDisplay","bind","clearDisplay","gcd","lcm","result","event","innerText","target","setState","prevState","length","parseInt","max","i","Component"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport { relative } from \"path\";\r\n\r\nclass Calculator extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state ={\r\n            displayText:\"\",\r\n            variableOne: 0,\r\n            variableTwo: 0,\r\n            action:\"\", \r\n            clear: false\r\n        }\r\n        this.addToDisplay = this.addToDisplay.bind(this)\r\n        this.clearDisplay = this.clearDisplay.bind(this)\r\n        this.gcd = this.gcd.bind(this)\r\n        this.lcm = this.lcm.bind(this)\r\n        this.result = this.result.bind(this)\r\n    }\r\n\r\n    addToDisplay(event) {\r\n        const {innerText} = event.target\r\n        this.setState((prevState) => {\r\n            if(prevState.clear)\r\n                return{\r\n                    displayText: innerText,\r\n                    clear: false\r\n                }\r\n            else if(prevState.displayText.length < 10)  \r\n                return { displayText : prevState.displayText + innerText}\r\n    })\r\n    }\r\n\r\n    clearDisplay(event) {\r\n        this.setState({ \r\n            displayText : \"\"\r\n        })\r\n    }\r\n          \r\n    gcd(event) {\r\n        this.setState((prevState) => { \r\n            return{\r\n            variableOne: prevState.displayText,\r\n            displayText : \"\",\r\n            action: \"gcd\"\r\n            }\r\n        })\r\n    }\r\n\r\n    lcm(event) {\r\n        this.setState((prevState) => { \r\n            return{\r\n            variableOne: prevState.displayText,\r\n            displayText : \"\",\r\n            action: \"lcm\"\r\n            }\r\n        })\r\n    }\r\n\r\n    result(event) {\r\n        this.setState((prevState) => {\r\n            if(prevState.action === \"gcd\"){\r\n                let variableOne = parseInt(prevState.variableOne)\r\n                let variableTwo = parseInt(prevState.displayText)   \r\n                var result = 1\r\n                if (variableOne % variableTwo === 0) {\r\n                    result = variableTwo\r\n                }\r\n                else if (variableTwo % variableOne === 0) {\r\n                    result = variableOne\r\n                }\r\n                else {\r\n                    const max = variableOne > variableTwo? variableTwo : variableOne\r\n                    for(let i=2;i<= max; i++) {\r\n                        if(i >= variableOne || i >= variableTwo)\r\n                            break\r\n                        while(variableOne % i == 0 && variableTwo % i == 0) {\r\n                            result *= i\r\n                            variableOne /= i\r\n                            variableTwo /= i\r\n                        }\r\n                    }\r\n                }\r\n                return{\r\n                    variableOne: 0,\r\n                    displayText : result,\r\n                    clear: true,\r\n                    action: \"\"\r\n                    }\r\n\r\n            }\r\n            else if(prevState.action == \"lcm\"){\r\n                let variableOne = parseInt(prevState.variableOne)\r\n                let variableTwo = parseInt(prevState.displayText)   \r\n                var result = 1\r\n                if (variableOne % variableTwo === 0) {\r\n                    result = variableOne\r\n                }\r\n                else if (variableTwo % variableOne === 0) {\r\n                    result = variableTwo\r\n                }\r\n                else {\r\n                    const max = variableOne > variableTwo? variableTwo : variableOne\r\n                    for(let i=2;i<= max; i++) {\r\n                        if(i >= variableOne || i >= variableTwo)\r\n                            break\r\n                        while(variableOne % i == 0 && variableTwo % i == 0) {\r\n                            result *= i\r\n                            variableOne /= i\r\n                            variableTwo /= i\r\n                        }\r\n                    }\r\n                    result *= variableOne * variableTwo\r\n                }\r\n                return{\r\n                    variableOne: 0,\r\n                    displayText : result,\r\n                    clear: true,\r\n                    action: \"\"\r\n                    }\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"text\" value={this.state.displayText}\r\n                 readOnly></input>\r\n                 <br/>\r\n                <button onClick={this.addToDisplay}>1</button>\r\n                <button onClick={this.addToDisplay}>2</button>\r\n                <button onClick={this.addToDisplay}>3</button>\r\n                <button onClick={this.addToDisplay}>4</button>\r\n                <button onClick={this.addToDisplay}>5</button>\r\n                <br/>\r\n                <button onClick={this.addToDisplay}>6</button>\r\n                <button onClick={this.addToDisplay}>7</button>\r\n                <button onClick={this.addToDisplay}>8</button>\r\n                <button onClick={this.addToDisplay}>9</button>\r\n                <button onClick={this.addToDisplay}>0</button>\r\n                <br/>\r\n                <button onClick={this.clearDisplay}>C</button>\r\n                <button onClick={this.gcd}>GCD</button>\r\n                <button onClick={this.lcm}>LCM</button>\r\n                <button onClick={this.result}>=</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator"]},"metadata":{},"sourceType":"module"}